// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SubscriptionServiceApi.Infrastructure;

namespace SubscriptionServiceApi.Migrations
{
    [DbContext(typeof(SsaContext))]
    [Migration("20190711124925_SSA")]
    partial class SSA
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("SubscriptionServiceApi.Infrastructure.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressCountry");

                    b.Property<string>("AddressLocality");

                    b.Property<string>("AddressRegion");

                    b.Property<bool>("Available");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<string>("PostOfficeBoxNumber");

                    b.Property<string>("PostalAddress");

                    b.Property<string>("PostalCode");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SubscriptionServiceApi.Infrastructure.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("Annual");

                    b.Property<bool>("Available");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<short>("HalfYear");

                    b.Property<short>("Monthly");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("SubscriptionServiceApi.Infrastructure.Models.InvoiceData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<bool>("Available");

                    b.Property<string>("CustomerName");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<string>("Organization");

                    b.Property<string>("PaymentMethod");

                    b.Property<string>("TaxNumber");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("InvoiceData");
                });

            modelBuilder.Entity("SubscriptionServiceApi.Infrastructure.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<bool>("Available");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<string>("Email");

                    b.Property<string>("FamilyName");

                    b.Property<string>("GivenName");

                    b.Property<int?>("InvoiceId");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("SubscriptionServiceApi.Infrastructure.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Available");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<int?>("DiscountId");

                    b.Property<string>("Name");

                    b.Property<float>("Prince");

                    b.Property<float>("UpgradePrince");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SubscriptionServiceApi.Infrastructure.Models.ProductVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Available");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<short>("Version1Level");

                    b.Property<short>("Version2Level");

                    b.Property<short>("Version3Level");

                    b.HasKey("Id");

                    b.ToTable("ProductVersions");
                });

            modelBuilder.Entity("SubscriptionServiceApi.Infrastructure.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Available");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<bool>("DemoAvailable");

                    b.Property<DateTime>("DemoEndTime");

                    b.Property<DateTime>("DemoStartTime");

                    b.Property<bool>("IsPaid");

                    b.Property<int?>("ProductId");

                    b.Property<int?>("ProductVersionId");

                    b.Property<DateTime>("SubscriptionEndTime");

                    b.Property<DateTime>("SubscriptionStartTime");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVersionId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SubscriptionServiceApi.Infrastructure.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Available");

                    b.Property<DateTime>("DateOfCreation");

                    b.Property<DateTime>("DateOfUpdate");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<int?>("PersonId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SubscriptionServiceApi.Infrastructure.Models.InvoiceData", b =>
                {
                    b.HasOne("SubscriptionServiceApi.Infrastructure.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("SubscriptionServiceApi.Infrastructure.Models.Person", b =>
                {
                    b.HasOne("SubscriptionServiceApi.Infrastructure.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SubscriptionServiceApi.Infrastructure.Models.InvoiceData", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");
                });

            modelBuilder.Entity("SubscriptionServiceApi.Infrastructure.Models.Product", b =>
                {
                    b.HasOne("SubscriptionServiceApi.Infrastructure.Models.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");
                });

            modelBuilder.Entity("SubscriptionServiceApi.Infrastructure.Models.Subscription", b =>
                {
                    b.HasOne("SubscriptionServiceApi.Infrastructure.Models.Product", "Product")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ProductId");

                    b.HasOne("SubscriptionServiceApi.Infrastructure.Models.ProductVersion", "ProductVersion")
                        .WithMany()
                        .HasForeignKey("ProductVersionId");

                    b.HasOne("SubscriptionServiceApi.Infrastructure.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SubscriptionServiceApi.Infrastructure.Models.User", b =>
                {
                    b.HasOne("SubscriptionServiceApi.Infrastructure.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });
#pragma warning restore 612, 618
        }
    }
}
